#!/bin/bash
SRCDIR=src
BUILDDIR=build
DATADIR=data
DIRS="\$(DATADIR) $(for d in $(find src -type d);do printf \$\(BUILDDIR\)/${d:4}\ ;done)"
TARGET=hendrvan
SRCEXT=cpp
HDREXT=h
CXX="g++"
CXXFLAGS="-std=c++11 -Wall -pedantic -Wno-long-long -O0 -ggdb -lncurses"
LEN_SRCEXT=`echo ${SRCEXT} | wc -c`
LEN_SRCDIR=`echo ${SRCDIR} | wc -c`
SRCS=`echo $(find ${SRCDIR} -type f -name "*.${SRCEXT}" -exec echo {} \;)`
OBJECTS=`
for SOURCE_FILE in ${SRCS}
do
	printf "%s%s" '$(BUILDDIR)/' "${SOURCE_FILE:LEN_SRCDIR:-LEN_SRCEXT}.o "
done
`
SOURCES=`
for SOURCE_FILE in ${SRCS}
do
	printf "%s%s" '$(SRCDIR)/' "${SOURCE_FILE:LEN_SRCDIR} "
done
`

print_hash_line(){
	local HASH_LINE='###############################################################################'
	printf "%s\n" "${HASH_LINE}"
}

end_section(){
	print_hash_line
	printf "\n"
}

print_middle(){
	local LEN_TITLE=`echo "$1"|wc -c`
	local HALF=$(((80-${LEN_TITLE})/2))
	printf '#'
	for i in `seq 2 ${HALF}`;do printf " ";done
	printf "%s" "$1"
	for i in `seq $((${HALF}+${LEN_TITLE}+2)) 80`;do printf " ";done
	printf '#\n'
}

print_title(){
	print_hash_line
	print_middle "$1"
	print_hash_line
}

print_blank(){
	print_middle ""
}

build_objects(){
	print_title "OBJECT FILES"

	for SOURCE_FILE in ${SRCS}
	do
		INCLUDES=`grep ^\#include ${SOURCE_FILE}|awk -F\" '{print $2}'|awk 'BEGIN{FS=".";OFS=".";}{$NF="o";print $0}'`
		#INCLUDES+=" "
		#INCLUDES+=`grep ^\#include "${SOURCE_FILE::-${LEN_SRCEXT}}.h" | awk -F\" '{print $2}'|awk 'BEGIN{FS=".";OFS=".";}!/^$/{$NF="o";print $0}'`
		OBJECT_FILE="${SOURCE_FILE:${LEN_SRCDIR}:-${LEN_SRCEXT}}.o"
		OBJ_DIR="`echo ${OBJECT_FILE} | awk 'BEGIN{FS="/";OFS="/";}{$NF="";print $0}'`"

		printf "\n"
		printf "\$(BUILDDIR)/${OBJECT_FILE}: "

		printf "%s" "\$(SRCDIR)/${SOURCE_FILE:${LEN_SRCDIR}}"

		for inc in $INCLUDES
		do
			i="${OBJ_DIR}${inc}"
			i=`echo ${i} | python3 -c "
l=str(input());
p=''
o=0
l=l.split('/')
d=len(l)
l.reverse()
for i in l:
	if i!='..':
		if o<=0:
			if d>0 and d!=len(l):
				p='/'+p
			p=i+p
		else:
			o-=1
	else:
		o+=1
	d-=1
print(p)"`
			if [ ${i} = ${OBJECT_FILE} ];
			then
				printf " \$(SRCDIR)/${i::-2}.h"
			else
				printf " \$(BUILDDIR)/${i}"
			fi
		done
		printf "\n"

		printf "\t%s\n" '@echo -e "\n$(YELLOW)Building $@ ...$(NOCOL)"'
		printf "\t%s\n" '$(CXX) $(CXXFLAGS) -c $< -o $@ && echo -e "$(GREEN)OK$(NOCOL)"'
	done

	end_section
}

intro(){
	print_hash_line
	print_blank
	print_middle "nInvaders++"
	print_blank
	print_middle "$1"
	print_blank

	print_hash_line

	print_blank
	print_middle '< oo> <o o> <oo > <ooo>'
	print_middle '<^>   /^\   /|\   <|>'
	print_middle '>O<   <o>   _o-   -o_'
	print_middle '@-@   <+>   #-#   %^%'
	print_middle '/~\   /.\   \~/   \./'
	print_blank
}

basics(){
	print_title "BASICS"
	printf "CXX       :=  %s\n"  "${CXX}"
	printf "CXXFLAGS  :=  %s\n"  "${CXXFLAGS}"
	printf "TARGET    :=  %s\n" "${TARGET}"
	printf "SRCDIR    :=  %s\n" "${SRCDIR}"
	printf "BUILDDIR  :=  %s\n" "${BUILDDIR}"
	printf "DATADIR   :=  %s\n" "${DATADIR}"

	printf "\n%s\n" '.PHONY : all clean run compile doc'
	printf "\n%s %s %s\n" 'all:' "${DIRS}" '$(OBJECTS) $(TARGET)'

	end_section
}

directories(){
	print_title "DIRECTORIES"

	for d in ${DIRS}
	do
		printf "\n"
		printf "%s\n" "${d}:"
		printf "\t%s\n" '@echo -e "\n$(YELLOWT)Creating $@ directory ...$(NOCOL)"'
		printf "\t%s\n" '@mkdir -p $@'
	done

	end_section
}

list_files(){
	print_title "FILES"

	printf "SOURCES   :=  %s\n\n" "${SOURCES}"
	printf "OBJECTS   :=  %s\n" "${OBJECTS}"

	end_section
}

colors(){
	print_title "COLORS"

	printf "%s\n" 'YELLOW    :=  \033[1;33m'
	printf "%s\n" 'YELLOWT   :=  \033[0;33m'
	printf "%s\n" 'RED       :=  \033[1;31m'
	printf "%s\n" 'GREEN     :=  \033[1;32m'
	printf "%s\n" 'GREENT    :=  \033[0;32m'
	printf "%s\n" 'NOCOL     :=  \033[0m'

	end_section
}

utilities(){
	print_title "UTILITIES"

	printf "%s\n" 'clean:'
	printf "\t%s\n" '@echo -e "\n$(RED)Cleaning ...$(NOCOL)"'
	printf "\t%s\n" 'rm -rf $(BUILDDIR) $(TARGET) doc'
	printf "\n%s\n" 'run: $(TARGET)'
	printf "\t%s\n" './$<'
	printf "\n%s\n" 'compile: $(TARGET)'
	printf "\n%s\n" 'doc:'
	printf "\t%s\n" 'doxygen'

	end_section
}

target(){
	print_title "TARGET"

	printf "%s %s %s\n" '$(TARGET):' "${DIRS}" '$(OBJECTS)'
	printf "\t%s\n" '@echo -e "\n$(GREEN)Linking ...$(NOCOL)"'
	printf "\t%s\n" '$(CXX) -o $@ $(OBJECTS) $(CXXFLAGS)'

	end_section
}

create_makefile(){
	intro "MAKEFILE"
	basics
	colors
	directories
	list_files
	utilities
	target
	build_objects
}

create_doxyfile(){
	intro "DOXYFILE"

	print_title "BASICS"
	printf "%s\n" 'PROJECT_NAME           = "Action game - nInvaders++"'
	printf "%s\n" 'PROJECT_BRIEF          = "A C++ ncurses implementation of space invaders."'
	printf "%s\n" 'OUTPUT_DIRECTORY       ='
	printf "%s\n" 'EXTENSION_MAPPING      = C++'
	end_section

	print_title ""
	printf "%s\n" 'EXTRACT_ALL            = YES'
	printf "%s\n" 'EXTRACT_PRIVATE        = YES'
	printf "%s\n" 'EXTRACT_STATIC         = YES'
	printf "%s\n" 'EXTRACT_LOCAL_CLASSES  = YES'
	end_section

	print_title "INPUT FILES"
	printf "%s\n" 'INPUT                  = src'
	printf "%s\n" 'RECURSIVE              = YES'
	end_section

	print_title "HTML"
	printf "%s\n" 'HTML_OUTPUT            = doc'
	printf "%s\n" 'HTML_TIMESTAMP         = YES'
	printf "%s\n" 'GENERATE_TREEVIEW      = YES'
	end_section

	print_title "LATEX"
	printf "%s\n" 'GENERATE_LATEX         = NO'
	end_section

	print_title "GRAPHS"
	printf "%s\n" 'HAVE_DOT               = YES'
	printf "%s\n" 'UML_LOOK               = YES'
	printf "%s\n" 'DOT_MULTI_TARGETS      = YES'
	end_section
}

create_makefile >Makefile
create_doxyfile >Doxyfile

make clean
